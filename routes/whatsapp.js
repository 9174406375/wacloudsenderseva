/**
 * ═══════════════════════════════════════════════════════════════
 * WHATSAPP SESSION ROUTES
 * Features: QR Login, Session Management, Status Monitoring
 * ═══════════════════════════════════════════════════════════════
 */

const express = require('express');
const router = express.Router();
const { protect, checkPermission } = require('../middleware/auth');
const User = require('../models/User');

// ═══════════════════════════════════════════════════════════════
// GET ALL USER'S WHATSAPP SESSIONS
// ═══════════════════════════════════════════════════════════════
router.get('/sessions', protect, async (req, res) => {
    try {
        const user = await User.findById(req.userId).select('whatsappSessions');

        res.json({
            success: true,
            data: user.whatsappSessions || []
        });

    } catch (error) {
        console.error('Get sessions error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to fetch sessions'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// CREATE NEW WHATSAPP SESSION (Generate QR)
// ═══════════════════════════════════════════════════════════════
router.post('/sessions', protect, checkPermission('send_messages'), async (req, res) => {
    try {
        const { name } = req.body;

        if (!name) {
            return res.status(400).json({
                success: false,
                error: 'Session name is required'
            });
        }

        const user = await User.findById(req.userId);

        // Check if user already has max sessions (e.g., 3)
        const maxSessions = 3;
        const activeSessions = user.whatsappSessions.filter(s => s.isActive).length;
        
        if (activeSessions >= maxSessions) {
            return res.status(400).json({
                success: false,
                error: `Maximum ${maxSessions} active sessions allowed`
            });
        }

        const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

        // Add session
        await user.addWhatsAppSession({
            sessionId,
            name,
            isActive: false,
            isPrimary: user.whatsappSessions.length === 0,
            status: 'qr_pending',
            qrCode: null // Will be generated by WhatsApp service
        });

        // TODO: Trigger WhatsApp QR generation via Socket.IO
        // const io = req.app.get('io');
        // io.to(`user_${req.userId}`).emit('whatsapp:qr_requested', { sessionId });

        res.status(201).json({
            success: true,
            message: 'WhatsApp session created. QR code will be generated shortly.',
            data: {
                sessionId,
                status: 'qr_pending',
                instructions: 'Open WhatsApp on your phone → Settings → Linked Devices → Link a Device → Scan QR'
            }
        });

    } catch (error) {
        console.error('Create session error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to create session'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// GET SESSION STATUS & QR CODE
// ═══════════════════════════════════════════════════════════════
router.get('/sessions/:sessionId', protect, async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        const session = user.whatsappSessions.find(
            s => s.sessionId === req.params.sessionId
        );

        if (!session) {
            return res.status(404).json({
                success: false,
                error: 'Session not found'
            });
        }

        res.json({
            success: true,
            data: session
        });

    } catch (error) {
        console.error('Get session error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to fetch session'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// UPDATE SESSION (Rename, Set Primary)
// ═══════════════════════════════════════════════════════════════
router.put('/sessions/:sessionId', protect, async (req, res) => {
    try {
        const { name, isPrimary } = req.body;
        const user = await User.findById(req.userId);

        if (isPrimary === true) {
            // Remove primary from all other sessions
            user.whatsappSessions.forEach(s => {
                s.isPrimary = false;
            });
        }

        await user.updateWhatsAppSession(req.params.sessionId, {
            name,
            isPrimary
        });

        res.json({
            success: true,
            message: 'Session updated successfully'
        });

    } catch (error) {
        console.error('Update session error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to update session'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// DELETE SESSION (Disconnect WhatsApp)
// ═══════════════════════════════════════════════════════════════
router.delete('/sessions/:sessionId', protect, async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        
        // TODO: Disconnect WhatsApp session via service
        // const io = req.app.get('io');
        // io.to(`user_${req.userId}`).emit('whatsapp:disconnect', { sessionId: req.params.sessionId });

        await user.removeWhatsAppSession(req.params.sessionId);

        res.json({
            success: true,
            message: 'Session deleted successfully'
        });

    } catch (error) {
        console.error('Delete session error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to delete session'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// REFRESH QR CODE (If expired)
// ═══════════════════════════════════════════════════════════════
router.post('/sessions/:sessionId/refresh-qr', protect, async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        const session = user.whatsappSessions.find(
            s => s.sessionId === req.params.sessionId
        );

        if (!session) {
            return res.status(404).json({
                success: false,
                error: 'Session not found'
            });
        }

        if (session.status !== 'qr_pending') {
            return res.status(400).json({
                success: false,
                error: 'QR refresh only available for pending sessions'
            });
        }

        // TODO: Request new QR via Socket.IO
        // const io = req.app.get('io');
        // io.to(`user_${req.userId}`).emit('whatsapp:qr_refresh', { sessionId: req.params.sessionId });

        res.json({
            success: true,
            message: 'QR code refresh requested'
        });

    } catch (error) {
        console.error('Refresh QR error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to refresh QR code'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// CHECK PHONE NUMBER ON WHATSAPP
// ═══════════════════════════════════════════════════════════════
router.post('/check-number', protect, async (req, res) => {
    try {
        const { phoneNumber, sessionId } = req.body;

        if (!phoneNumber) {
            return res.status(400).json({
                success: false,
                error: 'Phone number is required'
            });
        }

        // TODO: Check via WhatsApp service
        // For now, return mock response
        res.json({
            success: true,
            data: {
                phoneNumber,
                isOnWhatsApp: true,
                profilePic: null
            }
        });

    } catch (error) {
        console.error('Check number error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to check number'
        });
    }
});

// ═══════════════════════════════════════════════════════════════
// BULK CHECK NUMBERS
// ═══════════════════════════════════════════════════════════════
router.post('/bulk-check', protect, async (req, res) => {
    try {
        const { phoneNumbers, sessionId } = req.body;

        if (!phoneNumbers || !Array.isArray(phoneNumbers)) {
            return res.status(400).json({
                success: false,
                error: 'Phone numbers array is required'
            });
        }

        // TODO: Bulk check via WhatsApp service
        // For now, return mock response
        const results = phoneNumbers.map(phone => ({
            phoneNumber: phone,
            isOnWhatsApp: true,
            checked: true
        }));

        res.json({
            success: true,
            data: results,
            summary: {
                total: phoneNumbers.length,
                onWhatsApp: results.filter(r => r.isOnWhatsApp).length,
                notOnWhatsApp: results.filter(r => !r.isOnWhatsApp).length
            }
        });

    } catch (error) {
        console.error('Bulk check error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to check numbers'
        });
    }
});

module.exports = router;
